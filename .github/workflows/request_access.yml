name: Request DB Access

on:
  workflow_dispatch:
    inputs:
      ambiente:
        description: "Ambiente (dev, stg, prod)"
        required: true
        type: choice
        options: [dev, stg, prod]
      email:
        description: "Email do usuário (ex: nome@empresa.com)"
        required: true
        type: string
      host:
        description: "Endpoint do banco (ex: db.xxxxx.rds.amazonaws.com)"
        required: true
        type: string
      engine:
        description: "Engine do banco de dados"
        required: true
        type: choice
        options: [postgres, mysql, aurora]
      database:
        description: "Nome do banco de dados"
        required: true
        type: string
      region:
        description: "Região AWS"
        required: true
        type: string
      port:
        description: "Porta do banco"
        required: true
        type: string
      schemas:
        description: "Schemas e permissões em JSON"
        required: false
        type: string
      revogar:
        description: "Revogar permissões (deletar YAML)?"
        required: false
        default: false
        type: boolean
      remover:
        description: "Remover apenas permissões informadas?"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write

jobs:
  generate-or-delete-yaml:
    runs-on: ubuntu-24.04
    environment: development

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Instalar dependências Python
        run: pip install pyyaml

      - name: Buscar parâmetros do banco no Parameter Store
        id: parametros
        run: |
          config=$(aws ssm get-parameter --name "rds-access-control" --with-decryption --query Parameter.Value --output text)

          db_key="${{ github.event.inputs.database }}-${{ github.event.inputs.engine }}"
          user=$(echo "$config" | grep "^${db_key}-user=" | cut -d'=' -f2-)
          pass=$(echo "$config" | grep "^${db_key}-password=" | cut -d'=' -f2-)

          echo "::add-mask::$user"
          echo "::add-mask::$pass"

          echo "DB_USER=$user" >> $GITHUB_ENV
          echo "DB_PASS=$pass" >> $GITHUB_ENV

      - name: Definir nome do arquivo
        id: setup
        run: |
          nome_usuario="$(echo ${{ github.event.inputs.email }} | cut -d '@' -f1)"
          nome_arquivo="$nome_usuario-${{ github.event.inputs.engine }}-${{ github.event.inputs.database }}.yml"
          caminho="users-access-requests/${{ github.event.inputs.ambiente }}/$nome_arquivo"
          branch_name="access-$nome_usuario-${{ github.event.inputs.engine }}-${{ github.event.inputs.database }}-$(date +%s)"
          echo "caminho=$caminho" >> $GITHUB_OUTPUT
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Configurar identidade do Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
      - name: Revogar acesso (deletar arquivo YAML)
        if: ${{ github.event.inputs.revogar == true }}
        run: |
          if [ -f "${{ steps.setup.outputs.caminho }}" ]; then
            git rm "${{ steps.setup.outputs.caminho }}"
            git commit -m "Revogar acesso do usuário ${{ github.event.inputs.email }}"
          else
            echo "Arquivo não encontrado."

      - name: Gerar ou atualizar YAML com permissões
        if: ${{ github.event.inputs.revogar != true }}
        env:
          INPUT_HOST: ${{ github.event.inputs.host }}
          INPUT_EMAIL: ${{ github.event.inputs.email }}
          INPUT_DATABASE: ${{ github.event.inputs.database }}
          INPUT_ENGINE: ${{ github.event.inputs.engine }}
          INPUT_REGION: ${{ github.event.inputs.region }}
          INPUT_PORT: ${{ github.event.inputs.port }}
          REMOVER_PERMISSOES: ${{ github.event.inputs.remover }}
        run: |
          mkdir -p $(dirname "${{ steps.setup.outputs.caminho }}")
          python3 scripts/merge_permissions.py "${{ steps.setup.outputs.caminho }}" '${{ github.event.inputs.schemas }}'
          git add "${{ steps.setup.outputs.caminho }}"
          git commit -m "Atualizar acesso do usuário ${{ github.event.inputs.email }}"

      - name: Criar Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}
          branch: ${{ steps.setup.outputs.branch_name }}
          base: main
          title: "Solicitação de acesso para ${{ github.event.inputs.email }}"
          body: |
            **Solicitação de acesso ao banco**
            - Ambiente: `${{ github.event.inputs.ambiente }}`
            - Usuário: `${{ github.event.inputs.email }}`
            - Banco: `${{ github.event.inputs.database }}`
            - Engine: `${{ github.event.inputs.engine }}`
            - Região: `${{ github.event.inputs.region }}`
            - Permissões: ${{ github.event.inputs.schemas }}
          commit-message: "feat: acesso para ${{ github.event.inputs.email }}"
          delete-branch: false

      - name: Mostrar URL do Pull Request criado
        run: |
          echo "Pull Request: ${{ steps.create_pr.outputs.pull-request-url }}"