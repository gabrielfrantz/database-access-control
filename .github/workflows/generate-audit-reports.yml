name: Gerar Relat√≥rios de Auditoria

on:
  workflow_dispatch:
    inputs:
      user_email:
        description: "Email do usu√°rio"
        required: true
        type: string
      database_name:
        description: "Nome do banco espec√≠fico (opcional - deixe vazio para relat√≥rio completo)"
        required: false
        type: string
      output_format:
        description: "Formato de sa√≠da"
        required: true
        type: choice
        options: [html, json]
        default: html

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Valida√ß√£o de seguran√ßa obrigat√≥ria
  security-validation:
    name: üõ°Ô∏è Valida√ß√£o de Seguran√ßa
    uses: ./.github/workflows/reusable-security-check.yml
    with:
      workflow_name: "Generate Audit Reports"
      operation_type: "audit"

  generate-reports:
    name: üìä Gerar Relat√≥rios
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    
    needs: security-validation
    if: needs.security-validation.outputs.is_secure == 'true'

    steps:
      - name: Security Confirmation
        run: |
          echo "üõ°Ô∏è VALIDA√á√ÉO DE SEGURAN√áA APROVADA"
          echo "================================="
          echo "üéØ Status: ${{ needs.security-validation.outputs.security_status }}"
          echo "üîì Prosseguindo com gera√ß√£o de relat√≥rios..."

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install pyyaml

      - name: Validate Inputs
        run: |
          echo "üîç Validando inputs do relat√≥rio..."
          
          if [ -z "${{ github.event.inputs.user_email }}" ]; then
            echo "‚ùå Email do usu√°rio √© obrigat√≥rio"
            exit 1
          fi
          
          echo "‚úÖ Inputs validados"
          echo "üë§ Usu√°rio: ${{ github.event.inputs.user_email }}"
          echo "üóÑÔ∏è Banco: ${{ github.event.inputs.database_name || 'Todos os bancos' }}"
          echo "üìÑ Formato: ${{ github.event.inputs.output_format }}"

      - name: Generate User Report
        run: |
          echo "üîç Gerando relat√≥rio para usu√°rio: ${{ github.event.inputs.user_email }}"
          
          # Determinar tipo de relat√≥rio
          if [ -n "${{ github.event.inputs.database_name }}" ]; then
            report_type="espec√≠fico"
            database_param="--database ${{ github.event.inputs.database_name }}"
            output_suffix="${{ github.event.inputs.database_name }}"
          else
            report_type="completo"
            database_param=""
            output_suffix="completo"
          fi
          
          echo "üìä Tipo de relat√≥rio: $report_type"
          
          # Gerar nome do arquivo baseado no formato
          timestamp=$(date +%Y%m%d-%H%M%S)
          user_clean=$(echo "${{ github.event.inputs.user_email }}" | sed 's/@/-at-/g' | sed 's/\./-/g')
          
          if [ "${{ github.event.inputs.output_format }}" == "html" ]; then
            output_file="relatorio-${user_clean}-${output_suffix}-${timestamp}.html"
          else
            output_file="relatorio-${user_clean}-${output_suffix}-${timestamp}.json"
          fi
          
          echo "üìÅ Arquivo de sa√≠da: $output_file"
          
          # Executar gera√ß√£o do relat√≥rio
          python scripts/generate_audit_reports.py \
            --user "${{ github.event.inputs.user_email }}" \
            $database_param \
            --format ${{ github.event.inputs.output_format }} \
            --output "$output_file"
          
          echo "‚úÖ Relat√≥rio gerado com sucesso!"

      - name: Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: relatorio-auditoria-${{ github.event.inputs.output_format }}
          path: "*.html,*.json"
          retention-days: 30

      - name: Generate Summary
        run: |
          echo "## üìä Relat√≥rio de Auditoria Gerado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üë§ Usu√°rio:** ${{ github.event.inputs.user_email }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ github.event.inputs.database_name }}" ]; then
            echo "**üóÑÔ∏è Banco:** ${{ github.event.inputs.database_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**üìã Tipo:** Relat√≥rio Espec√≠fico" >> $GITHUB_STEP_SUMMARY
          else
            echo "**üóÑÔ∏è Banco:** Todos os bancos" >> $GITHUB_STEP_SUMMARY
            echo "**üìã Tipo:** Relat√≥rio Completo" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**üìÑ Formato:** ${{ github.event.inputs.output_format }}" >> $GITHUB_STEP_SUMMARY
          echo "**üìÖ Gerado em:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Relat√≥rio dispon√≠vel nos artefatos do workflow." >> $GITHUB_STEP_SUMMARY

  # Job autom√°tico para relat√≥rios semanais (apenas quando executado via schedule)
  weekly-reports:
    name: üìÖ Relat√≥rios Semanais Autom√°ticos
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    if: github.event_name == 'schedule'
    
    needs: security-validation

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install pyyaml

      - name: Generate Weekly Reports
        run: |
          echo "üìÖ Gerando relat√≥rios semanais autom√°ticos..."
          
          # Criar diret√≥rio para relat√≥rios
          mkdir -p weekly-reports
          
          # Gerar relat√≥rios para usu√°rios principais (exemplo)
          users=("gabriel.frantz@empresa.com" "maria.silva@empresa.com")
          
          for user in "${users[@]}"; do
            echo "üìä Gerando relat√≥rio para: $user"
            user_clean=$(echo "$user" | sed 's/@/-at-/g' | sed 's/\./-/g')
            
            # Relat√≥rio completo em HTML
            python scripts/generate_audit_reports.py \
              --user "$user" \
              --format html \
              --output "weekly-reports/relatorio-semanal-${user_clean}-$(date +%Y%m%d).html"
            
            # Relat√≥rio completo em JSON para an√°lise
            python scripts/generate_audit_reports.py \
              --user "$user" \
              --format json \
              --output "weekly-reports/relatorio-semanal-${user_clean}-$(date +%Y%m%d).json"
          done
          
          echo "‚úÖ Relat√≥rios semanais gerados!"

      - name: Upload Weekly Reports
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-semanais-${{ github.run_number }}
          path: weekly-reports/
          retention-days: 90
