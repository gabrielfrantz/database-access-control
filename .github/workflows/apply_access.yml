name: Apply DB Access

on:
  push:
    branches:
      - main
    paths:
      - 'users-access-requests/**.yml'
  workflow_dispatch:

jobs:
  # Valida√ß√£o de seguran√ßa obrigat√≥ria ANTES de qualquer opera√ß√£o
  security-validation:
    name: üõ°Ô∏è Valida√ß√£o de Seguran√ßa
    uses: ./.github/workflows/reusable-security-check.yml
    with:
      workflow_name: "Apply DB Access"
      operation_type: "apply"

  # Extra√ß√£o do ambiente dos workflows
  extract-environment:
    name: üîç Detectar Ambiente
    runs-on: ubuntu-24.04
    outputs:
      ambiente: ${{ steps.detect.outputs.ambiente }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: detect
        run: |
          files=$(git diff --name-only HEAD~1 HEAD | grep "users-access-requests/" | head -n 1)
          if [[ $files =~ users-access-requests/([^/]+)/ ]]; then
            echo "ambiente=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "ambiente=development" >> $GITHUB_OUTPUT
          fi
  
  # Job principal - s√≥ executa se a valida√ß√£o de seguran√ßa passar
  apply-access:
    name: üîß Aplicar Permiss√µes de Acesso
    runs-on: ubuntu-24.04
    environment: ${{ needs.extract-environment.outputs.ambiente }}
    timeout-minutes: 15

    # DEPEND√äNCIA OBRIGAT√ìRIA da valida√ß√£o de seguran√ßa
    needs: [security-validation, extract-environment]
    if: needs.security-validation.outputs.is_secure == 'true'
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Security Confirmation
        run: |
          echo "üõ°Ô∏è VALIDA√á√ÉO DE SEGURAN√áA APROVADA"
          echo "================================="
          echo "üéØ Status: ${{ needs.security-validation.outputs.security_status }}"
          echo "üîì Prosseguindo com aplica√ß√£o segura de permiss√µes..."
          echo ""

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install YQ
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Detect File Changes
        id: changes
        run: |
          echo "üîç Detectando mudan√ßas nos arquivos YAML..."
          
          # Detectar mudan√ßas via git diff
          echo "MODIFIED_FILES<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status ${{ github.event.before }} ${{ github.sha }} | awk '/^[A|M]/ && $2 ~ /^users-access-requests\/.*\.yml$/ { print $2 }' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "DELETED_FILES<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status ${{ github.event.before }} ${{ github.sha }} | awk '/^D/ && $2 ~ /^users-access-requests\/.*\.yml$/ { print $2 }' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Log das mudan√ßas detectadas
          modified_count=$(echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | grep -c . || echo "0")
          deleted_count=$(echo "${{ steps.changes.outputs.DELETED_FILES }}" | grep -c . || echo "0")
          echo "üìä Arquivos modificados: $modified_count"
          echo "üìä Arquivos deletados: $deleted_count"

      - name: Save Previous File States
        if: steps.changes.outputs.MODIFIED_FILES != ''
        run: |
          echo "üíæ Salvando estado anterior dos arquivos modificados..."
          mkdir -p /tmp/before_states
          
          echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo "Processando: $file"
              
              if git ls-tree -r ${{ github.event.before }} --name-only | grep -q "^$file$"; then
                git show ${{ github.event.before }}:$file > "/tmp/before_states/$(basename "$file")"
                echo "‚úÖ Estado anterior salvo para: $(basename "$file")"
              else
                echo "‚ÑπÔ∏è Arquivo $file √© novo (n√£o existia no commit anterior)"
                # Criar arquivo vazio para indicar que √© novo
                echo '{}' > "/tmp/before_states/$(basename "$file")"
              fi
            fi
          done

      - name: Process Permissions
        if: steps.changes.outputs.MODIFIED_FILES != ''
        run: |
          echo "üîß Processando permiss√µes dos arquivos modificados..."
          success_count=0
          error_count=0
          
          echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo ""
              echo "üìÅ Processando arquivo: $file"
              
              # Validar arquivo YAML
              if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo "‚ùå Arquivo YAML inv√°lido: $file"
                error_count=$((error_count + 1))
                continue
              fi
              
              # Extrair informa√ß√µes do arquivo
              db=$(yq -r '.database' "$file" 2>/dev/null)
              engine=$(yq -r '.engine' "$file" 2>/dev/null)
              user_email=$(yq -r '.user' "$file" 2>/dev/null)

              if [ "$db" = "null" ] || [ "$engine" = "null" ] || [ "$user_email" = "null" ]; then
                echo "‚ùå Campos obrigat√≥rios ausentes no arquivo: $file"
                error_count=$((error_count + 1))
                continue
              fi

              echo "üîç Buscando credenciais para ${db}-${engine}..."
              
              # Buscar credenciais no Parameter Store
              config=$(aws ssm get-parameter \
                --name "rds-access-control" \
                --with-decryption \
                --query Parameter.Value \
                --output text 2>/dev/null)
              
              if [ $? -ne 0 ] || [ -z "$config" ]; then
                echo "‚ùå Erro ao acessar Parameter Store"
                error_count=$((error_count + 1))
                continue
              fi
              
              # Extrair credenciais e mascarar IMEDIATAMENTE
              user=$(echo "$config" | grep "^${db}-${engine}-user=" | cut -d'=' -f2-)
              pass=$(echo "$config" | grep "^${db}-${engine}-password=" | cut -d'=' -f2-)
              
              # MASCARAMENTO IMEDIATO - antes de qualquer valida√ß√£o
              echo "::add-mask::$user"
              echo "::add-mask::$pass"

              if [ -z "$user" ] || [ -z "$pass" ]; then
                echo "‚ùå Credenciais n√£o encontradas para ${db}-${engine}"
                error_count=$((error_count + 1))
                continue
              fi

              # Usar vari√°veis locais em vez de export
              db_user="$user"
              db_pass="$pass"
              db_host=$(yq -r '.host' "$file")

              # Verificar se existe estado anterior e processar diff
              before_file="/tmp/before_states/$(basename "$file")"
              if [ -f "$before_file" ] && [ -s "$before_file" ] && [ "$(cat "$before_file")" != "{}" ]; then
                echo "üîÑ Executando revoga√ß√£o baseada no diff..."
                # Executar revoga√ß√£o com vari√°veis de ambiente seguras
                env DB_USER="$db_user" DB_PASS="$db_pass" DB_HOST="$db_host" python scripts/revoke_permissions.py "$before_file" "$file"
                if [ $? -eq 0 ]; then
                  echo "‚úÖ Revoga√ß√£o de permiss√µes conclu√≠da"
                else
                  echo "‚ö†Ô∏è Erro na revoga√ß√£o, mas continuando com aplica√ß√£o"
                fi
              else
                echo "‚ÑπÔ∏è Arquivo novo ou sem estado anterior - aplicando permiss√µes diretamente"
              fi

              # Aplicar novas permiss√µes
              echo "‚ûï Aplicando permiss√µes para usu√°rio: $user_email"
              # Executar aplica√ß√£o com vari√°veis de ambiente seguras
              env DB_USER="$db_user" DB_PASS="$db_pass" DB_HOST="$db_host" python scripts/apply_permissions.py "$file"
              if [ $? -eq 0 ]; then
                echo "‚úÖ Permiss√µes aplicadas com sucesso para: $user_email"
                success_count=$((success_count + 1))
              else
                echo "‚ùå Erro ao aplicar permiss√µes para: $user_email"
                error_count=$((error_count + 1))
              fi
            fi
          done
          
          echo ""
          echo "üìä RESUMO DO PROCESSAMENTO:"
          echo "‚úÖ Sucessos: $success_count"
          echo "‚ùå Erros: $error_count"

      - name: Process Deleted Files
        if: steps.changes.outputs.DELETED_FILES != ''
        run: |
          echo "üóëÔ∏è Processando arquivos deletados (revoga√ß√£o completa)..."
          revoked_count=0
          error_count=0
          
          echo "${{ steps.changes.outputs.DELETED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo ""
              echo "üóëÔ∏è Processando arquivo deletado: $file"
              
              # Obter estado anterior do arquivo
              if git ls-tree -r ${{ github.event.before }} --name-only | grep -q "^$file$"; then
                git show ${{ github.event.before }}:$file > "/tmp/deleted_file.yml"
                
                # Extrair informa√ß√µes do arquivo deletado
                db=$(yq -r '.database' "/tmp/deleted_file.yml" 2>/dev/null)
                engine=$(yq -r '.engine' "/tmp/deleted_file.yml" 2>/dev/null)
                user_email=$(yq -r '.user' "/tmp/deleted_file.yml" 2>/dev/null)

                if [ "$db" = "null" ] || [ "$engine" = "null" ] || [ "$user_email" = "null" ]; then
                  echo "‚ùå Campos obrigat√≥rios ausentes no arquivo deletado: $file"
                  error_count=$((error_count + 1))
                  continue
                fi

                echo "üîç Buscando credenciais para revoga√ß√£o: ${db}-${engine}..."
                
                # Buscar credenciais no Parameter Store
                config=$(aws ssm get-parameter \
                  --name "rds-access-control" \
                  --with-decryption \
                  --query Parameter.Value \
                  --output text 2>/dev/null)
                
                if [ $? -ne 0 ] || [ -z "$config" ]; then
                  echo "‚ùå Erro ao acessar Parameter Store para revoga√ß√£o"
                  error_count=$((error_count + 1))
                  continue
                fi
                
                # Extrair credenciais e mascarar IMEDIATAMENTE
                user=$(echo "$config" | grep "^${db}-${engine}-user=" | cut -d'=' -f2-)
                pass=$(echo "$config" | grep "^${db}-${engine}-password=" | cut -d'=' -f2-)
                
                # MASCARAMENTO IMEDIATO
                echo "::add-mask::$user"
                echo "::add-mask::$pass"

                if [ -z "$user" ] || [ -z "$pass" ]; then
                  echo "‚ùå Credenciais n√£o encontradas para revoga√ß√£o: ${db}-${engine}"
                  error_count=$((error_count + 1))
                  continue
                fi

                # Usar vari√°veis locais
                db_user="$user"
                db_pass="$pass"
                db_host=$(yq -r '.host' "/tmp/deleted_file.yml")

                # Executar revoga√ß√£o completa
                echo "üóëÔ∏è Revogando todas as permiss√µes para usu√°rio: $user_email"
                env DB_USER="$db_user" DB_PASS="$db_pass" DB_HOST="$db_host" python scripts/revoke_all_permissions.py "/tmp/deleted_file.yml"
                if [ $? -eq 0 ]; then
                  echo "‚úÖ Permiss√µes revogadas com sucesso para: $user_email"
                  revoked_count=$((revoked_count + 1))
                else
                  echo "‚ùå Erro ao revogar permiss√µes para: $user_email"
                  error_count=$((error_count + 1))
                fi
                
                rm -f "/tmp/deleted_file.yml"
              else
                echo "‚ö†Ô∏è N√£o foi poss√≠vel obter estado anterior do arquivo: $file"
                error_count=$((error_count + 1))
              fi
            fi
          done
          
          echo ""
          echo "üìä RESUMO DA REVOGA√á√ÉO:"
          echo "‚úÖ Revoga√ß√µes: $revoked_count"
          echo "‚ùå Erros: $error_count"

      - name: Show Final Summary
        run: |
          echo ""
          echo "üéâ PROCESSAMENTO CONCLU√çDO!"
          echo "=========================="
          echo ""
          echo "üìä Resumo Final:"
          
          modified_count=$(echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | grep -c . || echo "0")
          deleted_count=$(echo "${{ steps.changes.outputs.DELETED_FILES }}" | grep -c . || echo "0")
          
          echo "  üìù Arquivos modificados processados: $modified_count"
          echo "  üóëÔ∏è Arquivos deletados processados: $deleted_count"
          echo ""
          
          if [ "$modified_count" -eq 0 ] && [ "$deleted_count" -eq 0 ]; then
            echo "‚ÑπÔ∏è Nenhuma mudan√ßa em arquivos de permiss√£o detectada"
          else
            echo "‚úÖ Todas as mudan√ßas foram processadas com sucesso"
          fi
          echo ""
          echo "üîó Verifique os logs acima para detalhes espec√≠ficos de cada opera√ß√£o"