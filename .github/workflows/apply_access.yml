name: Apply DB Access

on:
  push:
    branches:
      - main
    paths:
      - 'users-access-requests/**.yml'
  workflow_dispatch:

jobs:
  apply-access:
    runs-on: ubuntu-24.04
    environment: development
    timeout-minutes: 15

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: "us-east-1"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Instalar yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Detect modified and deleted files
        id: changes
        run: |
          echo "üîç Detectando mudan√ßas nos arquivos YAML..."
          
          echo "MODIFIED_FILES<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status ${{ github.event.before }} ${{ github.sha }} | awk '/^[A|M]/ && $2 ~ /^users-access-requests\/.*\.yml$/ { print $2 }' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "DELETED_FILES<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status ${{ github.event.before }} ${{ github.sha }} | awk '/^D/ && $2 ~ /^users-access-requests\/.*\.yml$/ { print $2 }' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Log das mudan√ßas detectadas
          modified_count=$(echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | grep -c . || echo "0")
          deleted_count=$(echo "${{ steps.changes.outputs.DELETED_FILES }}" | grep -c . || echo "0")
          echo "üìä Arquivos modificados: $modified_count"
          echo "üìä Arquivos deletados: $deleted_count"

      - name: Salvar estado anterior dos arquivos modificados
        if: steps.changes.outputs.MODIFIED_FILES != ''
        run: |
          echo "üíæ Salvando estado anterior dos arquivos modificados..."
          mkdir -p /tmp/before_states
          
          echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo "Processando: $file"
              
              if git ls-tree -r ${{ github.event.before }} --name-only | grep -q "^$file$"; then
                git show ${{ github.event.before }}:$file > "/tmp/before_states/$(basename "$file")"
                echo "‚úÖ Estado anterior salvo para: $(basename "$file")"
              else
                echo "‚ÑπÔ∏è Arquivo $file √© novo (n√£o existia no commit anterior)"
                # Criar arquivo vazio para indicar que √© novo
                echo '{}' > "/tmp/before_states/$(basename "$file")"
              fi
            fi
          done

      - name: Processar permiss√µes
        if: steps.changes.outputs.MODIFIED_FILES != ''
        run: |
          echo "üîß Processando permiss√µes dos arquivos modificados..."
          success_count=0
          error_count=0
          
          echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo ""
              echo "üìÅ Processando arquivo: $file"
              
              # Validar arquivo YAML
              if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo "‚ùå Arquivo YAML inv√°lido: $file"
                error_count=$((error_count + 1))
                continue
              fi
              
              # Extrair informa√ß√µes do arquivo
              db=$(yq -r '.database' "$file" 2>/dev/null)
              engine=$(yq -r '.engine' "$file" 2>/dev/null)
              user_email=$(yq -r '.user' "$file" 2>/dev/null)

              if [ "$db" = "null" ] || [ "$engine" = "null" ] || [ "$user_email" = "null" ]; then
                echo "‚ùå Campos obrigat√≥rios ausentes no arquivo: $file"
                error_count=$((error_count + 1))
                continue
              fi

              echo "üîç Buscando credenciais para ${db}-${engine}..."
              
              # Buscar credenciais no Parameter Store
              config=$(aws ssm get-parameter \
                --name "rds-access-control" \
                --with-decryption \
                --query Parameter.Value \
                --output text 2>/dev/null)
              
              if [ $? -ne 0 ] || [ -z "$config" ]; then
                echo "‚ùå Erro ao acessar Parameter Store"
                error_count=$((error_count + 1))
                continue
              fi
              
              user=$(echo "$config" | grep "^${db}-${engine}-user=" | cut -d'=' -f2-)
              pass=$(echo "$config" | grep "^${db}-${engine}-password=" | cut -d'=' -f2-)

              if [ -z "$user" ] || [ -z "$pass" ]; then
                echo "‚ùå Credenciais n√£o encontradas para ${db}-${engine}"
                error_count=$((error_count + 1))
                continue
              fi

              # Mascarar credenciais
              echo "::add-mask::$user"
              echo "::add-mask::$pass"

              export DB_USER="$user"
              export DB_PASS="$pass"
              export DB_HOST=$(yq -r '.host' "$file")

              # Verificar se existe estado anterior e processar diff
              before_file="/tmp/before_states/$(basename "$file")"
              if [ -f "$before_file" ] && [ -s "$before_file" ] && [ "$(cat "$before_file")" != "{}" ]; then
                echo "üîÑ Executando revoga√ß√£o baseada no diff..."
                if python scripts/revoke_permissions.py "$before_file" "$file"; then
                  echo "‚úÖ Revoga√ß√£o de permiss√µes conclu√≠da"
                else
                  echo "‚ö†Ô∏è Erro na revoga√ß√£o, mas continuando com aplica√ß√£o"
                fi
              else
                echo "‚ÑπÔ∏è Arquivo novo ou sem estado anterior - aplicando permiss√µes diretamente"
              fi

              # Aplicar novas permiss√µes
              echo "‚ûï Aplicando permiss√µes para usu√°rio: $user_email"
              if python scripts/apply_permissions.py "$file"; then
                echo "‚úÖ Permiss√µes aplicadas com sucesso para: $user_email"
                success_count=$((success_count + 1))
              else
                echo "‚ùå Erro ao aplicar permiss√µes para: $user_email"
                error_count=$((error_count + 1))
              fi
            fi
          done
          
          echo ""
          echo "üìä Resumo do processamento:"
          echo "‚úÖ Sucessos: $success_count"
          echo "‚ùå Erros: $error_count"

      - name: Revogar permiss√µes
        if: steps.changes.outputs.DELETED_FILES != ''
        run: |
          echo "üóëÔ∏è Processando revoga√ß√£o de arquivos deletados..."
          success_count=0
          error_count=0
          
          echo "${{ steps.changes.outputs.DELETED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo ""
              echo "üìÅ Revogando permiss√µes do arquivo removido: $file"

              before_file="/tmp/before_states/$(basename "$file")"
              after_file="/tmp/after_$(basename "$file")"

              # Recuperar estado anterior do arquivo deletado
              if git show ${{ github.event.before }}:$file > "$before_file" 2>/dev/null; then
                echo "‚úÖ Estado anterior recuperado"
              else
                echo "‚ùå N√£o foi poss√≠vel recuperar estado anterior do arquivo: $file"
                error_count=$((error_count + 1))
                continue
              fi

              # Criar arquivo vazio para indicar revoga√ß√£o total
              echo '{}' > "$after_file"

              # Extrair informa√ß√µes do arquivo anterior
              db=$(yq -r '.database' "$before_file" 2>/dev/null)
              engine=$(yq -r '.engine' "$before_file" 2>/dev/null)
              host=$(yq -r '.host' "$before_file" 2>/dev/null)
              user_email=$(yq -r '.user' "$before_file" 2>/dev/null)

              if [ "$db" = "null" ] || [ "$engine" = "null" ] || [ "$user_email" = "null" ]; then
                echo "‚ùå Campos obrigat√≥rios ausentes no arquivo anterior: $file"
                error_count=$((error_count + 1))
                continue
              fi

              echo "üîç Buscando credenciais para ${db}-${engine}..."
              
              # Buscar credenciais no Parameter Store
              config=$(aws ssm get-parameter \
                --name "rds-access-control" \
                --with-decryption \
                --query Parameter.Value \
                --output text 2>/dev/null)
              
              if [ $? -ne 0 ] || [ -z "$config" ]; then
                echo "‚ùå Erro ao acessar Parameter Store"
                error_count=$((error_count + 1))
                continue
              fi
              
              user=$(echo "$config" | grep "^${db}-${engine}-user=" | cut -d'=' -f2-)
              pass=$(echo "$config" | grep "^${db}-${engine}-password=" | cut -d'=' -f2-)

              if [ -z "$user" ] || [ -z "$pass" ]; then
                echo "‚ùå Credenciais n√£o encontradas para ${db}-${engine}"
                error_count=$((error_count + 1))
                continue
              fi

              # Mascarar credenciais
              echo "::add-mask::$user"
              echo "::add-mask::$pass"

              export DB_USER="$user"
              export DB_PASS="$pass"
              export DB_HOST="$host"

              # Executar revoga√ß√£o total
              echo "üóëÔ∏è Executando revoga√ß√£o total para usu√°rio: $user_email"
              if python scripts/revoke_permissions.py "$before_file" "$after_file"; then
                echo "‚úÖ Revoga√ß√£o total conclu√≠da para: $user_email"
                success_count=$((success_count + 1))
              else
                echo "‚ùå Erro na revoga√ß√£o total para: $user_email"
                error_count=$((error_count + 1))
              fi
              
              # Limpar arquivos tempor√°rios
              rm -f "$before_file" "$after_file"
            fi
          done
          
          echo ""
          echo "üìä Resumo da revoga√ß√£o:"
          echo "‚úÖ Sucessos: $success_count"
          echo "‚ùå Erros: $error_count"

      - name: Limpeza de arquivos tempor√°rios
        if: always()
        run: |
          echo "üßπ Limpando arquivos tempor√°rios..."
          rm -rf /tmp/before_states /tmp/after_* /tmp/before_*
          echo "‚úÖ Limpeza conclu√≠da"

