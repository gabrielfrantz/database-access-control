name: Aplicar acesso aos banco de dados

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'users-access-requests/**/*.yml'
      - 'users-access-requests/**/*.yaml'
  pull_request:
    types: [closed]
    branches:
      - main
      - master
    paths:
      - 'users-access-requests/**/*.yml'
      - 'users-access-requests/**/*.yaml'
  workflow_dispatch:

jobs:
  # Validação de segurança obrigatória ANTES de qualquer operação
  security-validation:
    name: 🛡️ Validação de Segurança
    uses: ./.github/workflows/reusable-security-check.yml
    with:
      workflow_name: "Aplicar acesso aos banco de dados"
      operation_type: "apply"

  # Extração do ambiente dos workflows
  extract-environment:
    name: 🔍 Detectar Ambiente
    runs-on: ubuntu-24.04
    outputs:
      ambiente: ${{ steps.detect.outputs.ambiente }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: detect
        run: |
          files=$(git diff --name-only HEAD~1 HEAD | grep "users-access-requests/" | head -n 1)
          if [[ $files =~ users-access-requests/([^/]+)/ ]]; then
            echo "ambiente=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "ambiente=development" >> $GITHUB_OUTPUT
          fi
  
  # Job principal - só executa se a validação de segurança passar
  apply-access:
    name: 🔧 Aplicar Permissões de Acesso
    runs-on: ubuntu-24.04
    environment: ${{ needs.extract-environment.outputs.ambiente }}
    timeout-minutes: 15

    # DEPENDÊNCIA OBRIGATÓRIA da validação de segurança
    needs: [security-validation, extract-environment]
    if: |
      needs.security-validation.outputs.is_secure == 'true' && 
      (github.event_name == 'push' || 
       (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
       github.event_name == 'workflow_dispatch')
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Security Confirmation
        run: |
          echo "🛡️ VALIDAÇÃO DE SEGURANÇA APROVADA"
          echo "================================="
          echo "🎯 Status: ${{ needs.security-validation.outputs.security_status }}"
          echo "🔓 Prosseguindo com aplicação segura de permissões..."
          echo ""

      - name: Debug Workflow Trigger
        run: |
          echo "🔍 INFORMAÇÕES DO EVENTO"
          echo "======================="
          echo "📝 Evento: ${{ github.event_name }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "📄 SHA atual: ${{ github.sha }}"
          echo "📄 SHA anterior: ${{ github.event.before }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🔀 PR merged: ${{ github.event.pull_request.merged }}"
            echo "🎯 PR number: ${{ github.event.pull_request.number }}"
            echo "👤 PR author: ${{ github.event.pull_request.user.login }}"
          fi
          
          echo ""

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install YQ
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Detect File Changes
        id: changes
        run: |
          echo "🔍 Detectando mudanças nos arquivos YAML..."
          
          # Determinar SHA de referência baseado no tipo de evento
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Para PR merged, usar base do PR
            before_sha="${{ github.event.pull_request.base.sha }}"
            after_sha="${{ github.event.pull_request.merge_commit_sha }}"
            echo "🔀 Detectando mudanças de PR merged: $before_sha..$after_sha"
          else
            # Para push direto
            before_sha="${{ github.event.before }}"
            after_sha="${{ github.sha }}"
            echo "📤 Detectando mudanças de push: $before_sha..$after_sha"
          fi
          
          # Detectar mudanças via git diff
          echo "MODIFIED_FILES<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status "$before_sha" "$after_sha" | awk '/^[A|M]/ && $2 ~ /^users-access-requests\/.*\.ya?ml$/ { print $2 }' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "DELETED_FILES<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status "$before_sha" "$after_sha" | awk '/^D/ && $2 ~ /^users-access-requests\/.*\.ya?ml$/ { print $2 }' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Log das mudanças detectadas
          modified_files=$(git diff --name-status "$before_sha" "$after_sha" | awk '/^[A|M]/ && $2 ~ /^users-access-requests\/.*\.ya?ml$/ { print $2 }')
          deleted_files=$(git diff --name-status "$before_sha" "$after_sha" | awk '/^D/ && $2 ~ /^users-access-requests\/.*\.ya?ml$/ { print $2 }')
          
          modified_count=$(echo "$modified_files" | grep -c . || echo "0")
          deleted_count=$(echo "$deleted_files" | grep -c . || echo "0")
          
          echo "📊 Arquivos modificados: $modified_count"
          if [ $modified_count -gt 0 ]; then
            echo "📄 Arquivos modificados:"
            echo "$modified_files" | sed 's/^/  - /'
          fi
          
          echo "📊 Arquivos deletados: $deleted_count"
          if [ $deleted_count -gt 0 ]; then
            echo "📄 Arquivos deletados:"
            echo "$deleted_files" | sed 's/^/  - /'
          fi
          
          # Definir variáveis para os steps seguintes
          echo "before_sha=$before_sha" >> $GITHUB_OUTPUT
          echo "after_sha=$after_sha" >> $GITHUB_OUTPUT

      - name: Save Previous File States
        if: steps.changes.outputs.MODIFIED_FILES != ''
        run: |
          echo "💾 Salvando estado anterior dos arquivos modificados..."
          mkdir -p /tmp/before_states
          
          echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo "Processando: $file"
              
              if git ls-tree -r ${{ steps.changes.outputs.before_sha }} --name-only | grep -q "^$file$"; then
                git show ${{ steps.changes.outputs.before_sha }}:$file > "/tmp/before_states/$(basename "$file")"
                echo "✅ Estado anterior salvo para: $(basename "$file")"
              else
                echo "ℹ️ Arquivo $file é novo (não existia no commit anterior)"
                # Criar arquivo vazio para indicar que é novo
                echo '{}' > "/tmp/before_states/$(basename "$file")"
              fi
            fi
          done

      - name: Process Permissions
        if: steps.changes.outputs.MODIFIED_FILES != ''
        run: |
          echo "🔧 Processando permissões dos arquivos modificados..."
          
          # Inicializar contadores usando arquivos temporários
          echo "0" > /tmp/success_count
          echo "0" > /tmp/error_count
          
          # Verificar configuração AWS
          echo "🔍 Verificando configuração AWS..."
          aws sts get-caller-identity || {
            echo "❌ Erro: AWS CLI não configurado corretamente"
            exit 1
          }
          echo "✅ AWS CLI configurado corretamente"
          
          echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo ""
              echo "📁 Processando arquivo: $file"
              
              # Validar arquivo YAML
              if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo "❌ Arquivo YAML inválido: $file"
                error_count=$(cat /tmp/error_count)
                echo $((error_count + 1)) > /tmp/error_count
                continue
              fi
              
              # Extrair informações do arquivo
              db=$(yq -r '.database' "$file" 2>/dev/null)
              engine=$(yq -r '.engine' "$file" 2>/dev/null)
              user_email=$(yq -r '.user' "$file" 2>/dev/null)

              if [ "$db" = "null" ] || [ "$engine" = "null" ] || [ "$user_email" = "null" ]; then
                echo "❌ Campos obrigatórios ausentes no arquivo: $file"
                echo "   database: $db"
                echo "   engine: $engine" 
                echo "   user: $user_email"
                error_count=$(cat /tmp/error_count)
                echo $((error_count + 1)) > /tmp/error_count
                continue
              fi

              echo "🔍 Buscando credenciais para ${db}-${engine}..."
              echo "🌍 Região AWS: ${{ secrets.AWS_REGION }}"
              
              # Buscar credenciais diretamente do Parameter Store
              echo "🔐 Obtendo credenciais do Parameter Store..."
              config=$(aws ssm get-parameter \
                --region ${{ secrets.AWS_REGION }} \
                --name "rds-access-control" \
                --with-decryption \
                --query Parameter.Value \
                --output text 2>&1)
              
              aws_exit_code=$?
              if [ $aws_exit_code -ne 0 ]; then
                echo "❌ Erro ao acessar Parameter Store (exit code: $aws_exit_code)"
                echo "Detalhes do erro:"
                echo "$config"
                echo "💡 Verifique se o parâmetro 'rds-access-control' existe na região: ${{ secrets.AWS_REGION }}"
                error_count=$(cat /tmp/error_count)
                echo $((error_count + 1)) > /tmp/error_count
                continue
              fi
              
              if [ -z "$config" ]; then
                echo "❌ Parameter Store retornou conteúdo vazio"
                error_count=$(cat /tmp/error_count)
                echo $((error_count + 1)) > /tmp/error_count
                continue
              fi
              
              echo "✅ Credenciais obtidas do Parameter Store"
              
              # Extrair credenciais e mascarar IMEDIATAMENTE
              user=$(echo "$config" | grep "^${db}-${engine}-user=" | cut -d'=' -f2-)
              pass=$(echo "$config" | grep "^${db}-${engine}-password=" | cut -d'=' -f2-)
              
              # MASCARAMENTO IMEDIATO - antes de qualquer validação
              echo "::add-mask::$user"
              echo "::add-mask::$pass"

              if [ -z "$user" ] || [ -z "$pass" ]; then
                echo "❌ Credenciais não encontradas para ${db}-${engine}"
                error_count=$(cat /tmp/error_count)
                echo $((error_count + 1)) > /tmp/error_count
                continue
              fi

              echo "✅ Credenciais extraídas com sucesso"

              # Usar variáveis locais em vez de export
              db_user="$user"
              db_pass="$pass"
              db_host=$(yq -r '.host' "$file")

              echo "🔗 Host do banco: $db_host"

              # Verificar se existe estado anterior e processar diff
              before_file="/tmp/before_states/$(basename "$file")"
              if [ -f "$before_file" ] && [ -s "$before_file" ] && [ "$(cat "$before_file")" != "{}" ]; then
                echo "🔄 Executando revogação baseada no diff..."
                # Executar revogação com variáveis de ambiente seguras
                env DB_USER="$db_user" DB_PASS="$db_pass" DB_HOST="$db_host" python scripts/revoke_permissions.py "$before_file" "$file"
                revoke_exit_code=$?
                if [ $revoke_exit_code -eq 0 ]; then
                  echo "✅ Revogação de permissões concluída"
                else
                  echo "⚠️ Erro na revogação (exit code: $revoke_exit_code), mas continuando com aplicação"
                fi
              else
                echo "ℹ️ Arquivo novo ou sem estado anterior - aplicando permissões diretamente"
              fi

              # Aplicar novas permissões
              echo "➕ Aplicando permissões para usuário: $user_email"
              # Executar aplicação com variáveis de ambiente seguras
              env DB_USER="$db_user" DB_PASS="$db_pass" DB_HOST="$db_host" python scripts/apply_permissions.py "$file"
              apply_exit_code=$?
              if [ $apply_exit_code -eq 0 ]; then
                echo "✅ Permissões aplicadas com sucesso para: $user_email"
                success_count=$(cat /tmp/success_count)
                echo $((success_count + 1)) > /tmp/success_count
              else
                echo "❌ Erro ao aplicar permissões para: $user_email (exit code: $apply_exit_code)"
                error_count=$(cat /tmp/error_count)
                echo $((error_count + 1)) > /tmp/error_count
              fi
            fi
          done
          
          # Ler contadores finais
          final_success=$(cat /tmp/success_count)
          final_errors=$(cat /tmp/error_count)
          
          echo ""
          echo "📊 RESUMO DO PROCESSAMENTO:"
          echo "✅ Sucessos: $final_success"
          echo "❌ Erros: $final_errors"

      - name: Process Deleted Files
        if: steps.changes.outputs.DELETED_FILES != ''
        run: |
          echo "🗑️ Processando arquivos deletados (revogação completa)..."
          
          # Inicializar contadores usando arquivos temporários
          echo "0" > /tmp/revoked_count
          echo "0" > /tmp/deleted_error_count
          
          echo "${{ steps.changes.outputs.DELETED_FILES }}" | while read file; do
            if [ -n "$file" ]; then
              echo ""
              echo "🗑️ Processando arquivo deletado: $file"
              
              # Obter estado anterior do arquivo
              if git ls-tree -r ${{ steps.changes.outputs.before_sha }} --name-only | grep -q "^$file$"; then
                git show ${{ steps.changes.outputs.before_sha }}:$file > "/tmp/deleted_file.yml"
                
                # Extrair informações do arquivo deletado
                db=$(yq -r '.database' "/tmp/deleted_file.yml" 2>/dev/null)
                engine=$(yq -r '.engine' "/tmp/deleted_file.yml" 2>/dev/null)
                user_email=$(yq -r '.user' "/tmp/deleted_file.yml" 2>/dev/null)

                if [ "$db" = "null" ] || [ "$engine" = "null" ] || [ "$user_email" = "null" ]; then
                  echo "❌ Campos obrigatórios ausentes no arquivo deletado: $file"
                  echo "   database: $db"
                  echo "   engine: $engine"
                  echo "   user: $user_email"
                  error_count=$(cat /tmp/deleted_error_count)
                  echo $((error_count + 1)) > /tmp/deleted_error_count
                  continue
                fi

                echo "🔍 Buscando credenciais para revogação: ${db}-${engine}..."
                
                # Buscar credenciais diretamente do Parameter Store
                echo "🔐 Obtendo credenciais do Parameter Store..."
                config=$(aws ssm get-parameter \
                  --region ${{ secrets.AWS_REGION }} \
                  --name "rds-access-control" \
                  --with-decryption \
                  --query Parameter.Value \
                  --output text 2>&1)
                
                aws_exit_code=$?
                if [ $aws_exit_code -ne 0 ]; then
                  echo "❌ Erro ao acessar Parameter Store para revogação (exit code: $aws_exit_code)"
                  echo "Detalhes do erro:"
                  echo "$config"
                  echo "💡 Verifique se o parâmetro 'rds-access-control' existe na região: ${{ secrets.AWS_REGION }}"
                  error_count=$(cat /tmp/deleted_error_count)
                  echo $((error_count + 1)) > /tmp/deleted_error_count
                  continue
                fi
                
                if [ -z "$config" ]; then
                  echo "❌ Parameter Store retornou conteúdo vazio"
                  error_count=$(cat /tmp/deleted_error_count)
                  echo $((error_count + 1)) > /tmp/deleted_error_count
                  continue
                fi
                
                echo "✅ Credenciais obtidas do Parameter Store"
                
                # Extrair credenciais e mascarar IMEDIATAMENTE
                user=$(echo "$config" | grep "^${db}-${engine}-user=" | cut -d'=' -f2-)
                pass=$(echo "$config" | grep "^${db}-${engine}-password=" | cut -d'=' -f2-)
                
                # MASCARAMENTO IMEDIATO
                echo "::add-mask::$user"
                echo "::add-mask::$pass"

                if [ -z "$user" ] || [ -z "$pass" ]; then
                  echo "❌ Credenciais não encontradas para revogação: ${db}-${engine}"
                  error_count=$(cat /tmp/deleted_error_count)
                  echo $((error_count + 1)) > /tmp/deleted_error_count
                  continue
                fi

                echo "✅ Credenciais extraídas com sucesso"

                # Usar variáveis locais
                db_user="$user"
                db_pass="$pass"
                db_host=$(yq -r '.host' "/tmp/deleted_file.yml")

                echo "🔗 Host do banco: $db_host"

                # Executar revogação completa
                echo "🗑️ Revogando todas as permissões para usuário: $user_email"
                env DB_USER="$db_user" DB_PASS="$db_pass" DB_HOST="$db_host" python scripts/revoke_all_permissions.py "/tmp/deleted_file.yml"
                revoke_exit_code=$?
                if [ $revoke_exit_code -eq 0 ]; then
                  echo "✅ Permissões revogadas com sucesso para: $user_email"
                  revoked_count=$(cat /tmp/revoked_count)
                  echo $((revoked_count + 1)) > /tmp/revoked_count
                else
                  echo "❌ Erro ao revogar permissões para: $user_email (exit code: $revoke_exit_code)"
                  error_count=$(cat /tmp/deleted_error_count)
                  echo $((error_count + 1)) > /tmp/deleted_error_count
                fi
                
                rm -f "/tmp/deleted_file.yml"
              else
                echo "⚠️ Não foi possível obter estado anterior do arquivo: $file"
                error_count=$(cat /tmp/deleted_error_count)
                echo $((error_count + 1)) > /tmp/deleted_error_count
              fi
            fi
          done
          
          # Ler contadores finais
          final_revoked=$(cat /tmp/revoked_count)
          final_deleted_errors=$(cat /tmp/deleted_error_count)
          
          echo ""
          echo "📊 RESUMO DA REVOGAÇÃO:"
          echo "✅ Revogações: $final_revoked"
          echo "❌ Erros: $final_deleted_errors"

      - name: Show Final Summary
        run: |
          echo ""
          echo "🎉 PROCESSAMENTO CONCLUÍDO!"
          echo "=========================="
          echo ""
          echo "📊 Resumo Final:"
          
          modified_count=$(echo "${{ steps.changes.outputs.MODIFIED_FILES }}" | grep -c . || echo "0")
          deleted_count=$(echo "${{ steps.changes.outputs.DELETED_FILES }}" | grep -c . || echo "0")
          
          echo "  📝 Arquivos modificados processados: $modified_count"
          echo "  🗑️ Arquivos deletados processados: $deleted_count"
          echo ""
          
          if [ "$modified_count" -eq 0 ] && [ "$deleted_count" -eq 0 ]; then
            echo "ℹ️ Nenhuma mudança em arquivos de permissão detectada"
          else
            echo "✅ Todas as mudanças foram processadas com sucesso"
          fi
          echo ""
          echo "🔗 Verifique os logs acima para detalhes específicos de cada operação"
