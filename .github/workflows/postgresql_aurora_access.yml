name: PostgreSQL-Aurora Access Request

on:
  workflow_dispatch:
    inputs:
      engine_type:
        description: "Tipo de Engine"
        required: true
        type: choice
        options: [postgres, aurora]
      ambiente:
        description: "Ambiente"
        required: true
        type: choice
        options: [development, staging, production]
      email:
        description: "Email do usuário (ex: nome@empresa.com)"
        required: true
        type: string
      host:
        description: "Endpoint do banco"
        required: true
        type: string
      database:
        description: "Nome do banco de dados"
        required: true
        type: string
      region:
        description: "Região AWS"
        required: true
        type: string
      port:
        description: "Porta do banco"
        required: true
        default: "5432"
        type: string
      schema:
        description: "Nome do schema (apenas um)"
        required: true
        type: string
      tabelas:
        description: "Nomes das tabelas (separadas por vírgula) - deixe vazio para aplicar no schema inteiro"
        required: false
        type: string
      perm_select:
        description: "SELECT - Consultar dados"
        required: false
        default: false
        type: boolean
      perm_insert:
        description: "INSERT - Inserir dados"
        required: false
        default: false
        type: boolean
      perm_update:
        description: "UPDATE - Atualizar dados"
        required: false
        default: false
        type: boolean
      perm_delete:
        description: "DELETE - Deletar dados"
        required: false
        default: false
        type: boolean
      perm_truncate:
        description: "TRUNCATE - Truncar tabelas"
        required: false
        default: false
        type: boolean
      perm_references:
        description: "REFERENCES - Criar chaves estrangeiras"
        required: false
        default: false
        type: boolean
      perm_trigger:
        description: "TRIGGER - Criar triggers"
        required: false
        default: false
        type: boolean
      perm_usage:
        description: "USAGE - Usar schema"
        required: false
        default: false
        type: boolean
      perm_execute:
        description: "EXECUTE - Executar funções"
        required: false
        default: false
        type: boolean
      perm_create:
        description: "CREATE - Criar objetos"
        required: false
        default: false
        type: boolean
      perm_temp:
        description: "TEMP - Criar tabelas temporárias"
        required: false
        default: false
        type: boolean
      perm_all:
        description: "ALL PRIVILEGES - Todas as permissões"
        required: false
        default: false
        type: boolean
      revogar:
        description: "Revogar permissões (deletar YAML)?"
        required: false
        default: false
        type: boolean
      remover_permissoes:
        description: "Remover apenas permissões informadas?"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write

jobs:
  # Validação de segurança obrigatória ANTES de qualquer operação
  security-validation:
    name: 🛡️ Validação de Segurança
    uses: ./.github/workflows/reusable-security-check.yml
    with:
      workflow_name: "PostgreSQL Aurora Access Request"
      operation_type: "postgresql"

  # Job principal - só executa se a validação de segurança passar
  process-postgresql-aurora-access:
    name: 🐘 Processar Acesso PostgreSQL Aurora
    runs-on: ubuntu-24.04
    environment: ${{ github.event.inputs.ambiente }}
    timeout-minutes: 10
    
    # DEPENDÊNCIA OBRIGATÓRIA da validação de segurança
    needs: security-validation
    if: needs.security-validation.outputs.is_secure == 'true'

    steps:
      - name: Security Confirmation
        run: |
          echo "🛡️ VALIDAÇÃO DE SEGURANÇA APROVADA"
          echo "================================="
          echo "🎯 Status: ${{ needs.security-validation.outputs.security_status }}"
          echo "🔓 Prosseguindo com operações PostgreSQL Aurora seguras..."
          echo ""

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Input
        run: |
          echo "🔍 Validando entrada para ${{ github.event.inputs.engine_type }}..."
          
          # Validar email
          if ! echo "${{ github.event.inputs.email }}" | grep -E '^[^@]+@[^@]+\.[^@]+$'; then
            echo "❌ Email inválido"
            exit 1
          fi
          
          # Validar porta
          if ! echo "${{ github.event.inputs.port }}" | grep -E '^[0-9]+$'; then
            echo "❌ Porta deve ser numérica"
            exit 1
          fi
          
          # Verificar se pelo menos uma permissão foi selecionada (exceto para revogação)
          if [ "${{ github.event.inputs.revogar }}" != "true" ]; then
            selected_permissions=0
            [ "${{ github.event.inputs.perm_select }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_insert }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_update }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_delete }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_truncate }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_references }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_trigger }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_usage }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_execute }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_create }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_temp }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            [ "${{ github.event.inputs.perm_all }}" == "true" ] && selected_permissions=$((selected_permissions + 1))
            
            if [ $selected_permissions -eq 0 ]; then
              echo "❌ Pelo menos uma permissão deve ser selecionada"
              exit 1
            fi
          fi
          
          echo "✅ Validação concluída"

      - name: Install Python Dependencies
        run: pip install pyyaml

      - name: Fetch Credentials from Parameter Store
        id: fetch_credentials
        run: |
          echo "🔍 Buscando credenciais no Parameter Store..."
          
          config=$(aws ssm get-parameter \
            --name "rds-access-control" \
            --with-decryption \
            --query Parameter.Value \
            --output text)

          db_key="${{ github.event.inputs.database }}-${{ github.event.inputs.engine_type }}"
          user=$(echo "$config" | grep "^${db_key}-user=" | cut -d'=' -f2-)
          pass=$(echo "$config" | grep "^${db_key}-password=" | cut -d'=' -f2-)

          if [ -z "$user" ] || [ -z "$pass" ]; then
            echo "❌ Credenciais não encontradas para ${db_key}"
            exit 1
          fi

          echo "::add-mask::$user"
          echo "::add-mask::$pass"

          echo "DB_USER=$user" >> $GITHUB_ENV
          echo "DB_PASS=$pass" >> $GITHUB_ENV

      - name: Build Permissions JSON
        id: build_json
        run: |
          echo "🔧 Construindo JSON de permissões..."
          
          # Construir array de permissões
          permissions="["
          first=true
          
          [ "${{ github.event.inputs.perm_select }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"SELECT\""
            first=false
          }
          [ "${{ github.event.inputs.perm_insert }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"INSERT\""
            first=false
          }
          [ "${{ github.event.inputs.perm_update }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"UPDATE\""
            first=false
          }
          [ "${{ github.event.inputs.perm_delete }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"DELETE\""
            first=false
          }
          [ "${{ github.event.inputs.perm_truncate }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"TRUNCATE\""
            first=false
          }
          [ "${{ github.event.inputs.perm_references }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"REFERENCES\""
            first=false
          }
          [ "${{ github.event.inputs.perm_trigger }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"TRIGGER\""
            first=false
          }
          [ "${{ github.event.inputs.perm_usage }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"USAGE\""
            first=false
          }
          [ "${{ github.event.inputs.perm_execute }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"EXECUTE\""
            first=false
          }
          [ "${{ github.event.inputs.perm_create }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"CREATE\""
            first=false
          }
          [ "${{ github.event.inputs.perm_temp }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"TEMP\""
            first=false
          }
          [ "${{ github.event.inputs.perm_all }}" == "true" ] && {
            [ "$first" == "false" ] && permissions="$permissions,"
            permissions="$permissions\"ALL PRIVILEGES\""
            first=false
          }
          
          permissions="$permissions]"
          
          # Verificar se é granular (tabelas específicas) ou schema completo
          if [ -n "${{ github.event.inputs.tabelas }}" ]; then
            # Granular - construir array de tabelas
            echo "📊 Modo granular - tabelas específicas"
            tables_array="["
            IFS=',' read -ra TABLES <<< "${{ github.event.inputs.tabelas }}"
            first_table=true
            for table in "${TABLES[@]}"; do
              table=$(echo "$table" | xargs) # Remover espaços em branco
              [ "$first_table" == "false" ] && tables_array="$tables_array,"
              tables_array="$tables_array{\"nome\":\"$table\",\"permissions\":$permissions}"
              first_table=false
            done
            tables_array="$tables_array]"
            
            json="[{\"nome\":\"${{ github.event.inputs.schema }}\",\"tipo\":\"granular\",\"tabelas\":$tables_array}]"
          else
            # Schema completo
            echo "📋 Modo schema completo"
            json="[{\"nome\":\"${{ github.event.inputs.schema }}\",\"permissions\":$permissions}]"
          fi
          
          echo "JSON gerado: $json"
          echo "schemas_json=$json" >> $GITHUB_OUTPUT

      - name: Setup File Paths
        id: setup
        run: |
          # Nova estrutura: ambiente/engine/database/usuario.yml
          user_email="${{ github.event.inputs.email }}"
          database="${{ github.event.inputs.database }}"
          environment="${{ github.event.inputs.ambiente }}"
          engine="${{ github.event.inputs.engine_type }}"
          
          # Criar estrutura de diretórios
          directory="users-access-requests/${environment}/${engine}/${database}"
          file_path="${directory}/${user_email}.yml"
          
          # Nome da branch
          username="$(echo ${user_email} | cut -d '@' -f1)"
          branch_name="${engine}-access-${username}-${database}-$(date +%s)"
          
          echo "directory=$directory" >> $GITHUB_OUTPUT
          echo "file_path=$file_path" >> $GITHUB_OUTPUT
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "user_email=$user_email" >> $GITHUB_OUTPUT
          echo "engine=$engine" >> $GITHUB_OUTPUT

      - name: Configure Git Identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
      - name: Revoke Access
        if: ${{ github.event.inputs.revogar == 'true' }}
        run: |
          file_path="${{ steps.setup.outputs.file_path }}"
          if [ -f "$file_path" ]; then
            git rm "$file_path"
            git commit -m "🗑️ ${{ steps.setup.outputs.engine }}: Revogar acesso do usuário ${{ steps.setup.outputs.user_email }} no banco ${{ github.event.inputs.database }}"
            echo "✅ Arquivo removido: $file_path"
          else
            echo "⚠️ Arquivo não encontrado: $file_path"
            echo "ℹ️ Usuário pode não ter permissões neste banco ou já foi revogado"
          fi

      - name: Generate or Update YAML
        if: ${{ github.event.inputs.revogar != 'true' }}
        env:
          INPUT_HOST: ${{ github.event.inputs.host }}
          INPUT_EMAIL: ${{ github.event.inputs.email }}
          INPUT_DATABASE: ${{ github.event.inputs.database }}
          INPUT_ENGINE: ${{ github.event.inputs.engine_type }}
          INPUT_REGION: ${{ github.event.inputs.region }}
          INPUT_PORT: ${{ github.event.inputs.port }}
          REMOVER_PERMISSOES: ${{ github.event.inputs.remover_permissoes }}
        run: |
          echo "🔧 Processando permissões ${{ github.event.inputs.engine_type }}..."
          echo "📁 Estrutura: ${{ steps.setup.outputs.directory }}"
          echo "📄 Arquivo: ${{ steps.setup.outputs.file_path }}"
          
          # Verificar se diretório existe
          if [ ! -d "${{ steps.setup.outputs.directory }}" ]; then
            echo "🏗️ Criando nova estrutura de diretórios: ${{ steps.setup.outputs.directory }}"
            mkdir -p "${{ steps.setup.outputs.directory }}"
          else
            echo "📂 Diretório já existe: ${{ steps.setup.outputs.directory }}"
          fi
          
          # Verificar se arquivo existe
          if [ -f "${{ steps.setup.outputs.file_path }}" ]; then
            echo "📝 Atualizando arquivo existente: ${{ steps.setup.outputs.file_path }}"
          else
            echo "🆕 Criando novo arquivo: ${{ steps.setup.outputs.file_path }}"
          fi
          
          # Processar permissões usando script (que também cria diretórios se necessário)
          python3 scripts/merge_permissions.py "${{ steps.setup.outputs.file_path }}" '${{ steps.build_json.outputs.schemas_json }}'
          
          # Adicionar ao Git
          git add "${{ steps.setup.outputs.file_path }}"
          
          # Commit com mensagem apropriada
          if [ "${{ github.event.inputs.remover_permissoes }}" == "true" ]; then
            git commit -m "➖ ${{ steps.setup.outputs.engine }}: Remover permissões do usuário ${{ steps.setup.outputs.user_email }} no banco ${{ github.event.inputs.database }}"
          else
            git commit -m "➕ ${{ steps.setup.outputs.engine }}: Atualizar acesso do usuário ${{ steps.setup.outputs.user_email }} no banco ${{ github.event.inputs.database }}"
          fi
          
          echo "✅ Arquivo processado com sucesso!"

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          branch: ${{ steps.setup.outputs.branch_name }}
          base: main
          title: "${{ github.event.inputs.engine_type == 'postgres' && '🐘' || '🌟' }} ${{ github.event.inputs.engine_type }}: Acesso para ${{ github.event.inputs.email }}"
          body: |
            ## ${{ github.event.inputs.engine_type == 'postgres' && '🐘 PostgreSQL' || '🌟 Aurora' }} - Solicitação de Acesso
            
            **📋 Informações:**
            - 👤 **Usuário:** `${{ github.event.inputs.email }}`
            - 🌍 **Ambiente:** `${{ github.event.inputs.ambiente }}`
            - ⚙️ **Engine:** `${{ github.event.inputs.engine_type }}`
            - 🗄️ **Banco:** `${{ github.event.inputs.database }}`
            - 🔌 **Host:** `${{ github.event.inputs.host }}`
            - 🚪 **Porta:** `${{ github.event.inputs.port }}`
            - 🌐 **Região:** `${{ github.event.inputs.region }}`
            
            **🎯 Permissões Solicitadas:**
            - 📁 **Schema:** `${{ github.event.inputs.schema }}`
            ${{ github.event.inputs.tabelas != '' && format('- 📊 **Tabelas:** `{0}` (granular)', github.event.inputs.tabelas) || '- 📋 **Escopo:** Schema completo' }}
            
            **🔑 Permissões:**
            ${{ github.event.inputs.perm_select == 'true' && '- ✅ SELECT (consultar dados)' || '' }}
            ${{ github.event.inputs.perm_insert == 'true' && '- ✅ INSERT (inserir dados)' || '' }}
            ${{ github.event.inputs.perm_update == 'true' && '- ✅ UPDATE (atualizar dados)' || '' }}
            ${{ github.event.inputs.perm_delete == 'true' && '- ✅ DELETE (deletar dados)' || '' }}
            ${{ github.event.inputs.perm_truncate == 'true' && '- ✅ TRUNCATE (truncar tabelas)' || '' }}
            ${{ github.event.inputs.perm_references == 'true' && '- ✅ REFERENCES (chaves estrangeiras)' || '' }}
            ${{ github.event.inputs.perm_trigger == 'true' && '- ✅ TRIGGER (criar triggers)' || '' }}
            ${{ github.event.inputs.perm_usage == 'true' && '- ✅ USAGE (usar schema)' || '' }}
            ${{ github.event.inputs.perm_execute == 'true' && '- ✅ EXECUTE (executar funções)' || '' }}
            ${{ github.event.inputs.perm_create == 'true' && '- ✅ CREATE (criar objetos)' || '' }}
            ${{ github.event.inputs.perm_temp == 'true' && '- ✅ TEMP (tabelas temporárias)' || '' }}
            ${{ github.event.inputs.perm_all == 'true' && '- ✅ ALL PRIVILEGES (todas as permissões)' || '' }}
            
            **🎯 Tipo de Operação:**
            ${{ github.event.inputs.revogar == 'true' && '🗑️ **REVOGAÇÃO TOTAL**' || github.event.inputs.remover_permissoes == 'true' && '➖ **REMOÇÃO PARCIAL**' || '➕ **ADIÇÃO/ATUALIZAÇÃO**' }}
            
            **🔍 JSON Gerado:**
            ```json
            ${{ steps.build_json.outputs.schemas_json }}
            ```
            
            ---
            **⚠️ Importante:** Após o merge, as permissões serão aplicadas automaticamente no ${{ github.event.inputs.engine_type }}.
          commit-message: "feat: ${{ github.event.inputs.engine_type == 'postgres' && '🐘' || '🌟' }} ${{ github.event.inputs.engine_type }} acesso para ${{ github.event.inputs.email }}"
          delete-branch: false

      - name: Show Results
        run: |
          echo "🎉 Pull Request criado com sucesso!"
          echo "🔗 URL: ${{ steps.create_pr.outputs.pull-request-url }}"
          echo ""
          echo "📋 Resumo ${{ github.event.inputs.engine_type }}:"
          echo "  👤 Usuário: ${{ github.event.inputs.email }}"
          echo "  🌍 Ambiente: ${{ github.event.inputs.ambiente }}"
          echo "  ⚙️ Engine: ${{ github.event.inputs.engine_type }}"
          echo "  🗄️ Banco: ${{ github.event.inputs.database }}"
          echo "  📁 Schema: ${{ github.event.inputs.schema }}"
          echo "  📊 Tabelas: ${{ github.event.inputs.tabelas || 'Schema completo' }}"
          echo ""
          echo "⏳ Aguardando aprovação e merge..."
